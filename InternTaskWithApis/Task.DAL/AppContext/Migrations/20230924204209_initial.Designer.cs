// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using internTask.DAL.AppContext;

#nullable disable

namespace internTask.DAL.AppContext.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230924204209_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("internTask.DAL.Models.ApplicationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrentResidence")
                        .HasColumnType("int");

                    b.Property<int>("DateOfBirth")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("IdNumber")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId")
                        .IsUnique();

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("internTask.DAL.Models.ProgramModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateOnly>("ApplicationClose")
                        .HasColumnType("date");

                    b.Property<string>("ApplicationCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ApplicationOpen")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumOfApplication")
                        .HasColumnType("int");

                    b.Property<string>("MinQualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramBenefits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ProgramStart")
                        .HasColumnType("date");

                    b.Property<string>("ProgramType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProgramModels");
                });

            modelBuilder.Entity("internTask.DAL.Models.ProgramSkill", b =>
                {
                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("ProgramId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ProgramSkills");
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.QuestionChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Choice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DropdownQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("MultipleChoiceQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DropdownQuestionId");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("QuestionChoice");
                });

            modelBuilder.Entity("internTask.DAL.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.DropdownQuestion", b =>
                {
                    b.HasBaseType("internTask.DAL.Models.QuestionEntities.Question");

                    b.ToTable("DropdownQuestion");
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("internTask.DAL.Models.QuestionEntities.Question");

                    b.ToTable("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.ParagraghQuestion", b =>
                {
                    b.HasBaseType("internTask.DAL.Models.QuestionEntities.Question");

                    b.ToTable("ParagraghQuestion");
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.YesNoQuestion", b =>
                {
                    b.HasBaseType("internTask.DAL.Models.QuestionEntities.Question");

                    b.ToTable("YesNoQuestion");
                });

            modelBuilder.Entity("internTask.DAL.Models.ApplicationForm", b =>
                {
                    b.HasOne("internTask.DAL.Models.ProgramModel", "ProgramModel")
                        .WithOne("ApplicationForm")
                        .HasForeignKey("internTask.DAL.Models.ApplicationForm", "ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramModel");
                });

            modelBuilder.Entity("internTask.DAL.Models.ProgramModel", b =>
                {
                    b.OwnsOne("internTask.DAL.Helper.LocationEntities.Location", "Location", b1 =>
                        {
                            b1.Property<int>("ProgramModelId")
                                .HasColumnType("int");

                            b1.Property<string>("OnSightLocation")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("programLocation")
                                .HasColumnType("int");

                            b1.HasKey("ProgramModelId");

                            b1.ToTable("ProgramModels");

                            b1.WithOwner()
                                .HasForeignKey("ProgramModelId");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("internTask.DAL.Models.ProgramSkill", b =>
                {
                    b.HasOne("internTask.DAL.Models.ProgramModel", "Program")
                        .WithMany("programSkills")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("internTask.DAL.Models.Skill", "Skill")
                        .WithMany("programSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.Question", b =>
                {
                    b.HasOne("internTask.DAL.Models.ApplicationForm", "ApplicationForm")
                        .WithMany("Questions")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.QuestionChoice", b =>
                {
                    b.HasOne("internTask.DAL.Models.QuestionEntities.DropdownQuestion", null)
                        .WithMany("QuestionChoices")
                        .HasForeignKey("DropdownQuestionId");

                    b.HasOne("internTask.DAL.Models.QuestionEntities.MultipleChoiceQuestion", null)
                        .WithMany("QuestionChoices")
                        .HasForeignKey("MultipleChoiceQuestionId");
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.DropdownQuestion", b =>
                {
                    b.HasOne("internTask.DAL.Models.QuestionEntities.Question", null)
                        .WithOne()
                        .HasForeignKey("internTask.DAL.Models.QuestionEntities.DropdownQuestion", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.MultipleChoiceQuestion", b =>
                {
                    b.HasOne("internTask.DAL.Models.QuestionEntities.Question", null)
                        .WithOne()
                        .HasForeignKey("internTask.DAL.Models.QuestionEntities.MultipleChoiceQuestion", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.ParagraghQuestion", b =>
                {
                    b.HasOne("internTask.DAL.Models.QuestionEntities.Question", null)
                        .WithOne()
                        .HasForeignKey("internTask.DAL.Models.QuestionEntities.ParagraghQuestion", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.YesNoQuestion", b =>
                {
                    b.HasOne("internTask.DAL.Models.QuestionEntities.Question", null)
                        .WithOne()
                        .HasForeignKey("internTask.DAL.Models.QuestionEntities.YesNoQuestion", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("internTask.DAL.Models.ApplicationForm", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("internTask.DAL.Models.ProgramModel", b =>
                {
                    b.Navigation("ApplicationForm");

                    b.Navigation("programSkills");
                });

            modelBuilder.Entity("internTask.DAL.Models.Skill", b =>
                {
                    b.Navigation("programSkills");
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.DropdownQuestion", b =>
                {
                    b.Navigation("QuestionChoices");
                });

            modelBuilder.Entity("internTask.DAL.Models.QuestionEntities.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("QuestionChoices");
                });
#pragma warning restore 612, 618
        }
    }
}
